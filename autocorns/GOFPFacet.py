# Code generated by moonworm : https://github.com/bugout-dev/moonworm
# Moonworm version : 0.5.3

import argparse
import json
import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from brownie import Contract, network
from brownie.network.contract import (
    ContractConstructor,
    TransactionReceiptType,
    ContractNotFound,
    _ContractBase,
)
from eth_typing.evm import ChecksumAddress

CONTRACT_BUILD = {
    "bytecode": "608060405234801561001057600080fd5b506140d7806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80637828b1c5116100de578063bc197c8111610097578063eda4272811610071578063eda42728146103ba578063ef9aab24146103cd578063f23a6e61146103e0578063f3ba70b9146103ff57600080fd5b8063bc197c8114610375578063dccd137014610394578063ebe5ecd4146103a757600080fd5b80637828b1c5146102c4578063a69d7337146102d7578063b075f42b146102fe578063b315c94714610311578063b4fbb0f714610324578063b8bfca941461036257600080fd5b80632b0f430a116101305780632b0f430a1461024e578063399ae72414610263578063402ff0db1461027657806359dbfb2f146102965780635ced609f146102a9578063649bec36146102b157600080fd5b806301ffc9a71461017857806305917a03146101a05780630bafef5f146101b3578063150b7a02146101e35780632458d4721461021a578063293998441461023b575b600080fd5b61018b61018636600461340e565b610412565b60405190151581526020015b60405180910390f35b61018b6101ae36600461343f565b610449565b6101c66101c1366004613479565b610475565b604080519283526001600160a01b03909116602083015201610197565b6102016101f136600461355a565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610197565b61022d6102283660046135c5565b6104cf565b604051908152602001610197565b61022d6102493660046135de565b6105bf565b61026161025c36600461369b565b6105f3565b005b610261610271366004613479565b610a38565b6102896102843660046135c5565b610a71565b60405161019791906137d5565b61022d6102a436600461343f565b610c24565b61022d610cd9565b6102616102bf366004613889565b610cec565b6102616102d23660046138ae565b610e0e565b6102df6112c7565b604080516001600160a01b039093168352602083019190915201610197565b61026161030c366004613933565b6112f0565b61026161031f36600461397e565b611957565b61033761033236600461343f565b611a1c565b6040805182516001600160a01b03168152602080840151908201529181015190820152606001610197565b6102616103703660046139c4565b611a9d565b610201610383366004613a30565b63bc197c8160e01b95945050505050565b6102616103a2366004613add565b612453565b61022d6103b5366004613bac565b612895565b6102616103c8366004613933565b6128d3565b61022d6103db366004613be4565b612a94565b6102016103ee366004613c10565b63f23a6e6160e01b95945050505050565b61026161040d366004613889565b612ac7565b60006001600160e01b03198216630271189760e51b148061044357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610453612b99565b6000938452600c01602090815260408085209385529290525090205460ff1690565b6000806000610482612b99565b6001600160a01b03808716600081815260068401602090815260408083208a84528252808320549383526007909501815284822089835290529290922054919450169150505b9250929050565b6000806104da612b99565b9050806002015483111561054b5760405162461bcd60e51b815260206004820152602d60248201527f474f465046616365742e67657443757272656e7453746167653a20496e76616c60448201526c1a59081cd95cdcda5bdb881251609a1b60648201526084015b60405180910390fd5b600083815260038201602052604081209060015b600583015481116105aa57600086815260058501602090815260408083208484529091529020541561059357809150610598565b6105aa565b806105a281613c8e565b91505061055f565b506105b6816001613ca7565b95945050505050565b60006105c9612b99565b6000938452600801602090815260408085206001600160a01b039490941685529290525090205490565b60006105fd612b99565b805460018083015492935061061e926001600160a01b039092169190612bbd565b61063a5760405162461bcd60e51b815260040161054290613cba565b6000610644612b99565b600281018054919250600061065883613c8e565b9091555050600281015460009081526003820160205260409020546001600160a01b0316156106e55760405162461bcd60e51b815260206004820152603360248201527f474f465046616365742e63726561746553657373696f6e3a2053657373696f6e60448201527208185b1c9958591e481c9959da5cdd195c9959606a1b6064820152608401610542565b6001600160a01b03891661076b5760405162461bcd60e51b815260206004820152604160248201527f474f465046616365742e63726561746553657373696f6e3a20706c617965725460448201527f6f6b656e416464726573732063616e2774206265207a65726f206164647265736064820152607360f81b608482015260a401610542565b6001600160a01b038816151580610780575086155b6108185760405162461bcd60e51b815260206004820152606060248201527f474f465046616365742e63726561746553657373696f6e3a204966207061796d60448201527f656e74546f6b656e41646472657373206973207468652030206164647265737360648201527f2c207061796d656e74416d6f756e742073686f756c6420616c736f2062652030608482015260a401610542565b6040805161010080820183526001600160a01b038c811683528b811660208085019182528486018d81528c15156060870190815260016080880181815260a089018f815260c08a018f90528d151560e08b015260028c81015460009081526003808f019098529b909b208a5181546001600160a01b0319908116918b1691909117825597519381018054909816939098169290921790955591519785019790975595519083018054925161ffff1990931691151561ff0019169190911791151590930217909155915190919060048201906108f39082613daf565b5060c0820151805161090f9160058401916020909101906133ae565b5060e091909101516006909101805460ff191691151591909117905560028101546040516001600160a01b038a811692908c16917fa5f072cb4b05652b17e01a34b9f52294512fff3fd97d7fd8de24e2054f662aa791610976918c908b908d908b90613e6e565b60405180910390a3600281015460405187151581527fc0a774344f86bdd4cf4c3f3c4768b4a72c3c876ec1e4b628eb6221a1c08aef4a9060200160405180910390a26002810154604051600181527f2a085a3fb6067ccaf18d920859d73fa25f8034cea8939b867e0f49294749ae499060200160405180910390a280600201547f7f9d8e31ccf6d36ca8bcf4678e16cbfd860809c0a768c9b61e20bc02e7697b5086604051610a259190613ea6565b60405180910390a2505050505050505050565b610a40612c3c565b6000610a4a612b99565b80546001600160a01b0319166001600160a01b039490941693909317835550600190910155565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820181905260c082015260e0810191909152610ab9612b99565b6000838152600391820160209081526040918290208251610100808201855282546001600160a01b039081168352600184015416938201939093526002820154938101939093529283015460ff80821615156060850152919004161515608082015260048201805491929160a084019190610b3390613d26565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5f90613d26565b8015610bac5780601f10610b8157610100808354040283529160200191610bac565b820191906000526020600020905b815481529060010190602001808311610b8f57829003601f168201915b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610c0457602002820191906000526020600020905b815481526020019060010190808311610bf0575b50505091835250506006919091015460ff16151560209091015292915050565b6000808211610cb25760405162461bcd60e51b815260206004820152604e60248201527f474f465046616365742e676574436f727265637450617468466f72537461676560448201527f3a205374616765732061726520312d696e64657865642c2030206973206e6f7460648201526d20612076616c696420737461676560901b608482015260a401610542565b610cba612b99565b6000938452600501602090815260408085209385529290525090205490565b6000610ce3612b99565b60020154905090565b6000610cf6612b99565b8054600180830154929350610d17926001600160a01b039092169190612bbd565b610d335760405162461bcd60e51b815260040161054290613cba565b6000610d3d612b99565b90508060020154841115610daa5760405162461bcd60e51b815260206004820152602e60248201527f474f465046616365742e73657453657373696f6e4163746976653a20496e766160448201526d1b1a59081cd95cdcda5bdb88125160921b6064820152608401610542565b6000848152600380830160205260409182902001805485151560ff199091161790555184907fc0a774344f86bdd4cf4c3f3c4768b4a72c3c876ec1e4b628eb6221a1c08aef4a90610e0090861515815260200190565b60405180910390a250505050565b6000610e18612b99565b8054600180830154929350610e39926001600160a01b039092169190612bbd565b610e555760405162461bcd60e51b815260040161054290613cba565b60008411610ed05760405162461bcd60e51b815260206004820152604e602482015260008051602061404283398151915260448201527f3a205374616765732061726520312d696e64657865642c2030206973206e6f7460648201526d20612076616c696420737461676560901b608482015260a401610542565b6000610edd600186613eb9565b90506000610ee9612b99565b90508060020154871115610f475760405162461bcd60e51b815260206004820152603160248201526000805160206140428339815191526044820152701d1024b73b30b634b21039b2b9b9b4b7b760791b6064820152608401610542565b60008781526003820160205260409020600501548210610faf5760405162461bcd60e51b815260206004820152602f602482015260008051602061404283398151915260448201526e3a20496e76616c696420737461676560881b6064820152608401610542565b6000878152600382810160205260409091200154610100900460ff16156110525760405162461bcd60e51b815260206004820152605d602482015260008051602061404283398151915260448201527f3a204465616374697661746520697343686f6f73696e6741637469766520626560648201527f666f72652073657474696e672074686520636f72726563742070617468000000608482015260a401610542565b6001851015801561109257506000878152600382016020526040902060050180548390811061108357611083613ecc565b90600052602060002001548511155b6110e35760405162461bcd60e51b815260206004820152602e602482015260008051602061404283398151915260448201526d0744092dcecc2d8d2c840e0c2e8d60931b6064820152608401610542565b60008781526005820160209081526040808320898452909152902054156111765760405162461bcd60e51b815260206004820152604d602482015260008051602061404283398151915260448201527f3a20506174682068617320616c7265616479206265656e2063686f73656e206660648201526c6f72207468617420737461676560981b608482015260a401610542565b6001861115806111a057506000878152600582016020908152604080832085845290915290205415155b61120a5760405162461bcd60e51b8152602060048201526041602482015260008051602061404283398151915260448201527f3a2050617468206e6f742073657420666f722070726576696f757320737461676064820152606560f81b608482015260a401610542565b6000878152600582016020908152604080832089845282528083208890558983526003808501835292819020909201805461ff00191661010088151502179055815188815290810187905288917f974109522bb8a1b5a4ffcf18b2863de273eb722419ef3900c04ac84375ab96ae910160405180910390a2867f2a085a3fb6067ccaf18d920859d73fa25f8034cea8939b867e0f49294749ae49856040516112b6911515815260200190565b60405180910390a250505050505050565b60008060006112d4612b99565b80546001909101546001600160a01b0390911694909350915050565b7ff25566827f1ecffd3a8194c09082ce7cc925254b0665695b1181ab01362ea1cf805460ff16156113335760405162461bcd60e51b815260040161054290613ee2565b805460ff191660011781556000611348612b99565b905080600201548511156113a95760405162461bcd60e51b815260206004820152603460248201526000805160206140828339815191526044820152730e88125b9d985b1a59081cd95cdcda5bdb88125160621b6064820152608401610542565b60008581526003820160205260409020600101546001600160a01b031680156114f85760008681526003830160205260408120600201548291906113ee908790613f25565b6040516323b872dd60e01b8152336004820152306024820152604481018290529091506000906001600160a01b038416906323b872dd906064016020604051808303816000875af1158015611447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146b9190613f44565b9050806114f45760405162461bcd60e51b8152602060048201526057602482015260008051602061408283398151915260448201527f3a2053657373696f6e207265717569726573207061796d656e7420627574207060648201527f61796d656e742077617320756e7375636365737366756c000000000000000000608482015260a401610542565b5050505b600086815260038084016020526040909120015460ff166115835760405162461bcd60e51b815260206004820152604b602482015260008051602061408283398151915260448201527f3a2043616e6e6f74207374616b6520746f6b656e7320696e746f20696e61637460648201526a34bb329039b2b9b9b4b7b760a91b608482015260a401610542565b6000868152600583016020908152604080832060018452909152902054156116275760405162461bcd60e51b815260206004820152605c602482015260008051602061408283398151915260448201527f3a2054686520666972737420737461676520666f72207468697320736573736960648201527f6f6e2068617320616c7265616479206265656e207265736f6c76656400000000608482015260a401610542565b60008681526003830160205260408120546001600160a01b03169081905b8681101561194457336001600160a01b038316636352211e8a8a8581811061166f5761166f613ecc565b905060200201356040518263ffffffff1660e01b815260040161169491815260200190565b602060405180830381865afa1580156116b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d59190613f61565b6001600160a01b0316146117765760405162461bcd60e51b8152602060048201526068602482015260008051602061408283398151915260448201527f3a2043616e6e6f74207374616b65206120746f6b656e20696e746f207365737360648201527f696f6e207768696368206973206e6f74206f776e6564206279206d6573736167608482015267329039b2b73232b960c11b60a482015260c401610542565b6000898152600c8601602052604081209089898481811061179957611799613ecc565b602090810292909201358352508101919091526040016000205460ff161561182a5760405162461bcd60e51b815260206004820152604a602482015260008051602061408283398151915260448201527f3a20546f6b656e207761732070726576696f75736c79207374616b656420696e6064820152693a379039b2b9b9b4b7b760b11b608482015260a401610542565b816001600160a01b03166342842e0e33308b8b8681811061184d5761184d613ecc565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156118a457600080fd5b505af11580156118b8573d6000803e3d6000fd5b50505060008a8152600c87016020526040812060019250908a8a858181106118e2576118e2613ecc565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055506119328933858b8b8681811061192657611926613ecc565b90506020020135612cc5565b8061193c81613c8e565b915050611645565b5050835460ff1916909355505050505050565b6000611961612b99565b8054600180830154929350611982926001600160a01b039092169190612bbd565b61199e5760405162461bcd60e51b815260040161054290613cba565b60006119a8612b99565b905080600201548411156119ce5760405162461bcd60e51b815260040161054290613f7e565b600084815260038201602052604090206004016119eb8482613daf565b50837f7f9d8e31ccf6d36ca8bcf4678e16cbfd860809c0a768c9b61e20bc02e7697b5084604051610e009190613ea6565b611a49604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b611a51612b99565b60009384526004016020908152604080852093855292815292829020825160608101845281546001600160a01b0316815260018201549481019490945260020154918301919091525090565b7ff25566827f1ecffd3a8194c09082ce7cc925254b0665695b1181ab01362ea1cf805460ff1615611ae05760405162461bcd60e51b815260040161054290613ee2565b805460ff191660011781558151835114611b765760405162461bcd60e51b8152602060048201526057602482015260008051602061406283398151915260448201527f733a20746f6b656e49647320616e6420706174687320617272617973206d757360648201527f74206265206f66207468652073616d65206c656e677468000000000000000000608482015260a401610542565b6000611b80612b99565b90508060020154851115611be25760405162461bcd60e51b815260206004820152603560248201526000805160206140628339815191526044820152741cce88125b9d985b1a59081cd95cdcda5bdb881251605a1b6064820152608401610542565b6000858152600380830160205260409091209081015460ff16611c6e5760405162461bcd60e51b815260206004820152604a602482015260008051602061406283398151915260448201527f733a2043616e6e6f742063686f6f736520706174687320696e20696e616374696064820152693b329039b2b9b9b4b7b760b11b608482015260a401610542565b6003810154610100900460ff16611d0f5760405162461bcd60e51b81526020600482015260646024820181905260008051602061406283398151915260448301527f733a2043616e6e6f742063686f6f736520706174687320696e20612073657373908201527f696f6e20666f722077686963682063686f6f73696e67206973206e6f742061636084820152637469766560e01b60a482015260c401610542565b60016000805b60058401548311611d7d576000898152600586016020908152604080832086845290915290205415611d66575050600087815260058401602090815260408083208484529091529020548190611d6b565b611d7d565b82611d7581613c8e565b935050611d15565b60058401548210611de45760405162461bcd60e51b8152602060048201526039602482015260008051602061406283398151915260448201527f733a20546869732073657373696f6e2068617320656e646564000000000000006064820152608401610542565b6000611df1836001613ca7565b90506000856005018481548110611e0a57611e0a613ecc565b60009182526020808320909101548d835260048a0182526040808420868552909252908220919650915085905b8b518710156123aa5760008d815260098a01602052604081208d5182908f908b908110611e6657611e66613ecc565b602002602001015181526020019081526020016000205411611ef15760405162461bcd60e51b815260206004820152604a602482015260008051602061406283398151915260448201527f733a20546f6b656e206e6f742063757272656e746c79207374616b656420696e6064820152693a379039b2b9b9b4b7b760b11b608482015260a401610542565b87546001600160a01b0316600090815260078a01602052604081208d513392908f908b908110611f2357611f23613ecc565b6020908102919091018101518252810191909152604001600020546001600160a01b031614611fb35760405162461bcd60e51b8152602060048201526042602482015260008051602061406283398151915260448201527f733a204d657373616765206e6f742073656e7420627920746f6b656e206f776e60648201526132b960f11b608482015260a401610542565b851580611fc45750600688015460ff165b8061201b575060008d8152600b8a01602052604081208d518792908f908b908110611ff157611ff1613ecc565b60200260200101518152602001908152602001600020600088815260200190815260200160002054145b6120b95760405162461bcd60e51b815260206004820152606f602482015260008051602061406283398151915260448201527f733a2053657373696f6e206973206e6f7420666f72676976696e6720616e642060648201527f746f6b656e20646964206e6f742063686f6f736520636f72726563742070617460848201526e6820696e206c61737420737461676560881b60a482015260c401610542565b88600b0160008e815260200190815260200160002060008d89815181106120e2576120e2613ecc565b602002602001015181526020019081526020016000206000858152602001908152602001600020546000146121935760405162461bcd60e51b8152602060048201526057602482015260008051602061406283398151915260448201527f733a20546f6b656e2068617320616c72656164792063686f73656e206120706160648201527f746820696e207468652063757272656e74207374616765000000000000000000608482015260a401610542565b60018b88815181106121a7576121a7613ecc565b6020026020010151101580156121d65750828b88815181106121cb576121cb613ecc565b602002602001015111155b6122285760405162461bcd60e51b815260206004820152602f602482015260008051602061406283398151915260448201526e0e6744092dcecc2d8d2c840e0c2e8d608b1b6064820152608401610542565b8a878151811061223a5761223a613ecc565b602002602001015189600b0160008f815260200190815260200160002060008e8a8151811061226b5761226b613ecc565b60200260200101518152602001908152602001600020600086815260200190815260200160002081905550838c88815181106122a9576122a9613ecc565b60200260200101518e7fae6e25e49449c24047fda746c90847ce2022557a19fc7acf2c81a0b776de5bbc8e8b815181106122e5576122e5613ecc565b60200260200101516040516122fc91815260200190565b60405180910390a480546001600160a01b031615612398578560000361233257600281015461232b9083613ca7565b9150612398565b60008d8152600b8a01602052604081208d518792908f908b90811061235957612359613ecc565b60200260200101518152602001908152602001600020600088815260200190815260200160002054036123985760028101546123959083613ca7565b91505b866123a281613c8e565b975050611e37565b80546001600160a01b03161561243c578054600182015460405163731133e960e01b815233600482015260248101919091526044810184905260806064820152600060848201526001600160a01b0390911690819063731133e99060a401600060405180830381600087803b15801561242257600080fd5b505af1158015612436573d6000803e3d6000fd5b50505050505b5050875460ff191690975550505050505050505050565b600061245d612b99565b805460018083015492935061247e926001600160a01b039092169190612bbd565b61249a5760405162461bcd60e51b815260040161054290613cba565b60006124a4612b99565b90508887146125305760405162461bcd60e51b815260206004820152604c60248201527f474f465046616365742e7365745374616765526577617264733a207465726d6960448201527f6e7573416464726573736573206d75737420686176652073616d65206c656e6760648201526b74682061732073746167657360a01b608482015260a401610542565b8885146125b85760405162461bcd60e51b815260206004820152604a60248201527f474f465046616365742e7365745374616765526577617264733a207465726d6960448201527f6e7573506f6f6c496473206d75737420686176652073616d65206c656e6774686064820152692061732073746167657360b01b608482015260a401610542565b88831461263e5760405162461bcd60e51b815260206004820152604860248201527f474f465046616365742e7365745374616765526577617264733a20726577617260448201527f64416d6f756e7473206d75737420686176652073616d65206c656e6774682061606482015267732073746167657360c01b608482015260a401610542565b60008b8152600380830160205260409091209081015460ff16156126d85760405162461bcd60e51b815260206004820152604560248201527f474f465046616365742e7365745374616765526577617264733a2043616e6e6f60448201527f74207365742073746167652072657761726473206f6e2061637469766520736560648201526439b9b4b7b760d91b608482015260a401610542565b60005b8a811015612886578b8b828181106126f5576126f5613ecc565b90506020020135600111158015612728575060058201548c8c8381811061271e5761271e613ecc565b9050602002013511155b6127855760405162461bcd60e51b815260206004820152602860248201527f474f465046616365742e7365745374616765526577617264733a20496e76616c604482015267696420737461676560c01b6064820152608401610542565b60405180606001604052808b8b848181106127a2576127a2613ecc565b90506020020160208101906127b79190613fd4565b6001600160a01b031681526020018989848181106127d7576127d7613ecc565b9050602002013581526020018787848181106127f5576127f5613ecc565b905060200201358152508360040160008f815260200190815260200160002060008e8e8581811061282857612828613ecc565b60209081029290920135835250818101929092526040908101600020835181546001600160a01b0319166001600160a01b0390911617815591830151600183015591909101516002909101558061287e81613c8e565b9150506126db565b50505050505050505050505050565b600061289f612b99565b6000948552600a01602090815260408086206001600160a01b03959095168652938152838520928552919091525090205490565b7ff25566827f1ecffd3a8194c09082ce7cc925254b0665695b1181ab01362ea1cf805460ff16156129165760405162461bcd60e51b815260040161054290613ee2565b805460ff19166001178155600061292b612b99565b905080600201548511156129a05760405162461bcd60e51b815260206004820152603660248201527f474f465046616365742e756e7374616b65546f6b656e7346726f6d53657373696044820152751bdb8e88125b9d985b1a59081cd95cdcda5bdb88125160521b6064820152608401610542565b60008581526003820160205260408120805490916001600160a01b039091169081905b86811015611944576129ef8933858b8b868181106129e3576129e3613ecc565b90506020020135612feb565b816001600160a01b03166342842e0e30338b8b86818110612a1257612a12613ecc565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015612a6957600080fd5b505af1158015612a7d573d6000803e3d6000fd5b505050508080612a8c90613c8e565b9150506129c3565b6000612a9e612b99565b6000948552600b0160209081526040808620948652938152838520928552919091525090205490565b6000612ad1612b99565b8054600180830154929350612af2926001600160a01b039092169190612bbd565b612b0e5760405162461bcd60e51b815260040161054290613cba565b6000612b18612b99565b90508060020154841115612b3e5760405162461bcd60e51b815260040161054290613f7e565b600084815260038083016020526040918290200180548515156101000261ff00199091161790555184907f2a085a3fb6067ccaf18d920859d73fa25f8034cea8939b867e0f49294749ae4990610e0090861515815260200190565b7f0d54c2c4e00e7eac394fe4c4955c7281ffa207a49f04d83cbcc4d9522279cc3b90565b604051627eeac760e11b815233600482015260248101839052600090849083906001600160a01b0383169062fdd58e90604401602060405180830381865afa158015612c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c319190613ff1565b101595945050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b03163314612cc35760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b6064820152608401610542565b565b6000612ccf612b99565b6001600160a01b0384166000908152600682016020908152604080832086845290915290205490915015612d915760405162461bcd60e51b815260206004820152605d60248201527f474f465046616365742e5f616464546f6b656e546f456e756d65726174696f6e60448201527f3a20546f6b656e20697320616c7265616479206173736f63696174656420776960648201527f746820612073657373696f6e206f6e207468697320636f6e7472616374000000608482015260a401610542565b6001600160a01b03838116600090815260078301602090815260408083208684529091529020541615612e525760405162461bcd60e51b815260206004820152605c60248201527f474f465046616365742e5f616464546f6b656e546f456e756d65726174696f6e60448201527f3a20546f6b656e20697320616c7265616479206173736f63696174656420776960648201527f746820616e206f776e6572206f6e207468697320636f6e747261637400000000608482015260a401610542565b6000858152600982016020908152604080832085845290915290205415612ef25760405162461bcd60e51b815260206004820152604860248201527f474f465046616365742e5f616464546f6b656e546f456e756d65726174696f6e60448201527f3a20546f6b656e2077617320616c726561647920616464656420746f20656e7560648201526736b2b930ba34b7b760c11b608482015260a401610542565b6001600160a01b038381166000818152600684016020908152604080832087845282528083208a9055928252600785018152828220868352815282822080546001600160a01b0319169489169485179055888252600885018152828220848352815282822054898352600a860182528383209483529390529081208491612f7a846001613ca7565b8152602081019190915260400160002055612f96816001613ca7565b600087815260098401602090815260408083208784528252808320939093558882526008850181528282206001600160a01b03891683529052908120805491612fde83613c8e565b9190505550505050505050565b6000612ff5612b99565b6001600160a01b03841660009081526006820160209081526040808320868452909152902054909150851461309e5760405162461bcd60e51b8152602060048201526055602482015260008051602061402283398151915260448201527f6174696f6e3a20546f6b656e206973206e6f74206173736f636961746564207760648201527434ba34103a34329033b4bb32b71039b2b9b9b4b7b760591b608482015260a401610542565b6001600160a01b03838116600090815260078301602090815260408083208684529091529020548116908516146131475760405162461bcd60e51b8152602060048201526053602482015260008051602061402283398151915260448201527f6174696f6e3a20546f6b656e206973206e6f74206173736f636961746564207760648201527234ba34103a34329033b4bb32b71037bbb732b960691b608482015260a401610542565b6000858152600982016020908152604080832085845290915281205490036131d65760405162461bcd60e51b8152602060048201526048602482015260008051602061402283398151915260448201527f6174696f6e3a20546f6b656e207761736e277420616464656420746f20656e7560648201526736b2b930ba34b7b760c11b608482015260a401610542565b6001600160a01b03808416600081815260068401602090815260408083208784528252808320839055928252600785018152828220868352815282822080546001600160a01b0319169055888252600885018152828220938816808352938152828220548983526009860182528383208784528252838320548a8452600a87018352848420958452948252838320818452909152919020549091908282118015906132ac57506000888152600a8501602090815260408083206001600160a01b038b168452825280832085845290915290205485145b6133225760405162461bcd60e51b815260206004820152604d602482015260008051602061402283398151915260448201527f6174696f6e3a20546f6b656e207761736e2774207374616b656420627920746860648201526c329033b4bb32b71037bbb732b960991b608482015260a401610542565b6000888152600a8501602090815260408083206001600160a01b038b168085529083528184208685528084528285208690558c8552600989018452828520868652845282852087905589855282852085905587855283528184208490558b8452600888018352818420908452909152812080549161339f8361400a565b91905055505050505050505050565b8280548282559060005260206000209081019282156133e9579160200282015b828111156133e95782518255916020019190600101906133ce565b506133f59291506133f9565b5090565b5b808211156133f557600081556001016133fa565b60006020828403121561342057600080fd5b81356001600160e01b03198116811461343857600080fd5b9392505050565b6000806040838503121561345257600080fd5b50508035926020909101359150565b6001600160a01b038116811461347657600080fd5b50565b6000806040838503121561348c57600080fd5b823561349781613461565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156134e3576134e36134a5565b604052919050565b600082601f8301126134fc57600080fd5b81356001600160401b03811115613515576135156134a5565b613528601f8201601f19166020016134bb565b81815284602083860101111561353d57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561357057600080fd5b843561357b81613461565b9350602085013561358b81613461565b92506040850135915060608501356001600160401b038111156135ad57600080fd5b6135b9878288016134eb565b91505092959194509250565b6000602082840312156135d757600080fd5b5035919050565b600080604083850312156135f157600080fd5b82359150602083013561360381613461565b809150509250929050565b801515811461347657600080fd5b600082601f83011261362d57600080fd5b813560206001600160401b03821115613648576136486134a5565b8160051b6136578282016134bb565b928352848101820192828101908785111561367157600080fd5b83870192505b8483101561369057823582529183019190830190613677565b979650505050505050565b600080600080600080600060e0888a0312156136b657600080fd5b87356136c181613461565b965060208801356136d181613461565b95506040880135945060608801356136e88161360e565b935060808801356001600160401b038082111561370457600080fd5b6137108b838c016134eb565b945060a08a013591508082111561372657600080fd5b506137338a828b0161361c565b92505060c08801356137448161360e565b8091505092959891949750929550565b6000815180845260005b8181101561377a5760208185018101518683018201520161375e565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b838110156137ca578151875295820195908201906001016137ae565b509495945050505050565b602080825282516001600160a01b03168282015282015160009061380460408401826001600160a01b03169052565b50604083015160608301526060830151613822608084018215159052565b50608083015180151560a08401525060a08301516101008060c085015261384d610120850183613754565b915060c0850151601f198584030160e086015261386a838261379a565b92505060e085015161387f8286018215159052565b5090949350505050565b6000806040838503121561389c57600080fd5b8235915060208301356136038161360e565b600080600080608085870312156138c457600080fd5b84359350602085013592506040850135915060608501356138e48161360e565b939692955090935050565b60008083601f84011261390157600080fd5b5081356001600160401b0381111561391857600080fd5b6020830191508360208260051b85010111156104c857600080fd5b60008060006040848603121561394857600080fd5b8335925060208401356001600160401b0381111561396557600080fd5b613971868287016138ef565b9497909650939450505050565b6000806040838503121561399157600080fd5b8235915060208301356001600160401b038111156139ae57600080fd5b6139ba858286016134eb565b9150509250929050565b6000806000606084860312156139d957600080fd5b8335925060208401356001600160401b03808211156139f757600080fd5b613a038783880161361c565b93506040860135915080821115613a1957600080fd5b50613a268682870161361c565b9150509250925092565b600080600080600060a08688031215613a4857600080fd5b8535613a5381613461565b94506020860135613a6381613461565b935060408601356001600160401b0380821115613a7f57600080fd5b613a8b89838a0161361c565b94506060880135915080821115613aa157600080fd5b613aad89838a0161361c565b93506080880135915080821115613ac357600080fd5b50613ad0888289016134eb565b9150509295509295909350565b600080600080600080600080600060a08a8c031215613afb57600080fd5b8935985060208a01356001600160401b0380821115613b1957600080fd5b613b258d838e016138ef565b909a50985060408c0135915080821115613b3e57600080fd5b613b4a8d838e016138ef565b909850965060608c0135915080821115613b6357600080fd5b613b6f8d838e016138ef565b909650945060808c0135915080821115613b8857600080fd5b50613b958c828d016138ef565b915080935050809150509295985092959850929598565b600080600060608486031215613bc157600080fd5b833592506020840135613bd381613461565b929592945050506040919091013590565b600080600060608486031215613bf957600080fd5b505081359360208301359350604090920135919050565b600080600080600060a08688031215613c2857600080fd5b8535613c3381613461565b94506020860135613c4381613461565b9350604086013592506060860135915060808601356001600160401b03811115613c6c57600080fd5b613ad0888289016134eb565b634e487b7160e01b600052601160045260246000fd5b600060018201613ca057613ca0613c78565b5060010190565b8082018082111561044357610443613c78565b60208082526046908201527f474f465046616365742e6f6e6c7947616d654d61737465723a2054686520616460408201527f6472657373206973206e6f7420616e20617574686f72697a65642067616d652060608201526536b0b9ba32b960d11b608082015260a00190565b600181811c90821680613d3a57607f821691505b602082108103613d5a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115613daa57600081815260208120601f850160051c81016020861015613d875750805b601f850160051c820191505b81811015613da657828155600101613d93565b5050505b505050565b81516001600160401b03811115613dc857613dc86134a5565b613ddc81613dd68454613d26565b84613d60565b602080601f831160018114613e115760008415613df95750858301515b600019600386901b1c1916600185901b178555613da6565b600085815260208120601f198616915b82811015613e4057888601518255948401946001909101908401613e21565b5085821015613e5e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b85815284602082015260a060408201526000613e8d60a0830186613754565b9315156060830152509015156080909101529392505050565b6020815260006134386020830184613754565b8181038181111561044357610443613c78565b634e487b7160e01b600052603260045260246000fd5b60208082526023908201527f4c69625265656e7472616e637947756172643a207265656e7472616e742063616040820152626c6c2160e81b606082015260800190565b6000816000190483118215151615613f3f57613f3f613c78565b500290565b600060208284031215613f5657600080fd5b81516134388161360e565b600060208284031215613f7357600080fd5b815161343881613461565b60208082526036908201527f474f465046616365742e73657453657373696f6e43686f6f73696e67416374696040820152751d994e88125b9d985b1a59081cd95cdcda5bdb88125160521b606082015260800190565b600060208284031215613fe657600080fd5b813561343881613461565b60006020828403121561400357600080fd5b5051919050565b60008161401957614019613c78565b50600019019056fe474f465046616365742e5f72656d6f7665546f6b656e46726f6d456e756d6572474f465046616365742e736574436f727265637450617468466f725374616765474f465046616365742e63686f6f736543757272656e74537461676550617468474f465046616365742e7374616b65546f6b656e73496e746f53657373696f6ea2646970667358221220cd65006b05035f7388c2c51f2a55b03aba17fd0020cf0bb7c49e7fd9cead53fe64736f6c63430008100033",
    "abi": [
        {
            "anonymous": False,
            "inputs": [
                {
                    "indexed": True,
                    "internalType": "uint256",
                    "name": "sessionId",
                    "type": "uint256",
                },
                {
                    "indexed": True,
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256",
                },
                {
                    "indexed": True,
                    "internalType": "uint256",
                    "name": "stage",
                    "type": "uint256",
                },
                {
                    "indexed": False,
                    "internalType": "uint256",
                    "name": "path",
                    "type": "uint256",
                },
            ],
            "name": "PathChosen",
            "type": "event",
        },
        {
            "anonymous": False,
            "inputs": [
                {
                    "indexed": True,
                    "internalType": "uint256",
                    "name": "sessionId",
                    "type": "uint256",
                },
                {
                    "indexed": False,
                    "internalType": "uint256",
                    "name": "stage",
                    "type": "uint256",
                },
                {
                    "indexed": False,
                    "internalType": "uint256",
                    "name": "path",
                    "type": "uint256",
                },
            ],
            "name": "PathRegistered",
            "type": "event",
        },
        {
            "anonymous": False,
            "inputs": [
                {
                    "indexed": True,
                    "internalType": "uint256",
                    "name": "sessionId",
                    "type": "uint256",
                },
                {
                    "indexed": False,
                    "internalType": "bool",
                    "name": "isActive",
                    "type": "bool",
                },
            ],
            "name": "SessionActivated",
            "type": "event",
        },
        {
            "anonymous": False,
            "inputs": [
                {
                    "indexed": True,
                    "internalType": "uint256",
                    "name": "sessionId",
                    "type": "uint256",
                },
                {
                    "indexed": False,
                    "internalType": "bool",
                    "name": "isChoosingActive",
                    "type": "bool",
                },
            ],
            "name": "SessionChoosingActivated",
            "type": "event",
        },
        {
            "anonymous": False,
            "inputs": [
                {
                    "indexed": False,
                    "internalType": "uint256",
                    "name": "sessionId",
                    "type": "uint256",
                },
                {
                    "indexed": True,
                    "internalType": "address",
                    "name": "playerTokenAddress",
                    "type": "address",
                },
                {
                    "indexed": True,
                    "internalType": "address",
                    "name": "paymentTokenAddress",
                    "type": "address",
                },
                {
                    "indexed": False,
                    "internalType": "uint256",
                    "name": "paymentAmount",
                    "type": "uint256",
                },
                {
                    "indexed": False,
                    "internalType": "string",
                    "name": "uri",
                    "type": "string",
                },
                {
                    "indexed": False,
                    "internalType": "bool",
                    "name": "active",
                    "type": "bool",
                },
                {
                    "indexed": False,
                    "internalType": "bool",
                    "name": "isForgiving",
                    "type": "bool",
                },
            ],
            "name": "SessionCreated",
            "type": "event",
        },
        {
            "anonymous": False,
            "inputs": [
                {
                    "indexed": True,
                    "internalType": "uint256",
                    "name": "sessionId",
                    "type": "uint256",
                },
                {
                    "indexed": False,
                    "internalType": "string",
                    "name": "uri",
                    "type": "string",
                },
            ],
            "name": "SessionUriChanged",
            "type": "event",
        },
        {
            "inputs": [],
            "name": "adminTerminusInfo",
            "outputs": [
                {"internalType": "address", "name": "", "type": "address"},
                {"internalType": "uint256", "name": "", "type": "uint256"},
            ],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "uint256[]", "name": "tokenIds", "type": "uint256[]"},
                {"internalType": "uint256[]", "name": "paths", "type": "uint256[]"},
            ],
            "name": "chooseCurrentStagePaths",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "playerTokenAddress",
                    "type": "address",
                },
                {
                    "internalType": "address",
                    "name": "paymentTokenAddress",
                    "type": "address",
                },
                {"internalType": "uint256", "name": "paymentAmount", "type": "uint256"},
                {"internalType": "bool", "name": "isActive", "type": "bool"},
                {"internalType": "string", "name": "uri", "type": "string"},
                {"internalType": "uint256[]", "name": "stages", "type": "uint256[]"},
                {"internalType": "bool", "name": "isForgiving", "type": "bool"},
            ],
            "name": "createSession",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "uint256", "name": "stage", "type": "uint256"},
            ],
            "name": "getCorrectPathForStage",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"}
            ],
            "name": "getCurrentStage",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "uint256", "name": "tokenId", "type": "uint256"},
                {"internalType": "uint256", "name": "stage", "type": "uint256"},
            ],
            "name": "getPathChoice",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"}
            ],
            "name": "getSession",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "playerTokenAddress",
                            "type": "address",
                        },
                        {
                            "internalType": "address",
                            "name": "paymentTokenAddress",
                            "type": "address",
                        },
                        {
                            "internalType": "uint256",
                            "name": "paymentAmount",
                            "type": "uint256",
                        },
                        {"internalType": "bool", "name": "isActive", "type": "bool"},
                        {
                            "internalType": "bool",
                            "name": "isChoosingActive",
                            "type": "bool",
                        },
                        {"internalType": "string", "name": "uri", "type": "string"},
                        {
                            "internalType": "uint256[]",
                            "name": "stages",
                            "type": "uint256[]",
                        },
                        {"internalType": "bool", "name": "isForgiving", "type": "bool"},
                    ],
                    "internalType": "struct Session",
                    "name": "",
                    "type": "tuple",
                }
            ],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "uint256", "name": "tokenId", "type": "uint256"},
            ],
            "name": "getSessionTokenStakeGuard",
            "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "uint256", "name": "stage", "type": "uint256"},
            ],
            "name": "getStageReward",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "terminusAddress",
                            "type": "address",
                        },
                        {
                            "internalType": "uint256",
                            "name": "terminusPoolId",
                            "type": "uint256",
                        },
                        {
                            "internalType": "uint256",
                            "name": "rewardAmount",
                            "type": "uint256",
                        },
                    ],
                    "internalType": "struct StageReward",
                    "name": "",
                    "type": "tuple",
                }
            ],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "nftAddress", "type": "address"},
                {"internalType": "uint256", "name": "tokenId", "type": "uint256"},
            ],
            "name": "getStakedTokenInfo",
            "outputs": [
                {"internalType": "uint256", "name": "", "type": "uint256"},
                {"internalType": "address", "name": "", "type": "address"},
            ],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "adminTerminusAddress",
                    "type": "address",
                },
                {
                    "internalType": "uint256",
                    "name": "adminTerminusPoolID",
                    "type": "uint256",
                },
            ],
            "name": "init",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [],
            "name": "numSessions",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "address", "name": "staker", "type": "address"},
            ],
            "name": "numTokensStakedIntoSession",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "", "type": "address"},
                {"internalType": "address", "name": "", "type": "address"},
                {"internalType": "uint256[]", "name": "", "type": "uint256[]"},
                {"internalType": "uint256[]", "name": "", "type": "uint256[]"},
                {"internalType": "bytes", "name": "", "type": "bytes"},
            ],
            "name": "onERC1155BatchReceived",
            "outputs": [{"internalType": "bytes4", "name": "", "type": "bytes4"}],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "", "type": "address"},
                {"internalType": "address", "name": "", "type": "address"},
                {"internalType": "uint256", "name": "", "type": "uint256"},
                {"internalType": "uint256", "name": "", "type": "uint256"},
                {"internalType": "bytes", "name": "", "type": "bytes"},
            ],
            "name": "onERC1155Received",
            "outputs": [{"internalType": "bytes4", "name": "", "type": "bytes4"}],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "", "type": "address"},
                {"internalType": "address", "name": "", "type": "address"},
                {"internalType": "uint256", "name": "", "type": "uint256"},
                {"internalType": "bytes", "name": "", "type": "bytes"},
            ],
            "name": "onERC721Received",
            "outputs": [{"internalType": "bytes4", "name": "", "type": "bytes4"}],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "uint256", "name": "stage", "type": "uint256"},
                {"internalType": "uint256", "name": "path", "type": "uint256"},
                {"internalType": "bool", "name": "setIsChoosingActive", "type": "bool"},
            ],
            "name": "setCorrectPathForStage",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "bool", "name": "isActive", "type": "bool"},
            ],
            "name": "setSessionActive",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "bool", "name": "isChoosingActive", "type": "bool"},
            ],
            "name": "setSessionChoosingActive",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "string", "name": "uri", "type": "string"},
            ],
            "name": "setSessionUri",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "uint256[]", "name": "stages", "type": "uint256[]"},
                {
                    "internalType": "address[]",
                    "name": "terminusAddresses",
                    "type": "address[]",
                },
                {
                    "internalType": "uint256[]",
                    "name": "terminusPoolIds",
                    "type": "uint256[]",
                },
                {
                    "internalType": "uint256[]",
                    "name": "rewardAmounts",
                    "type": "uint256[]",
                },
            ],
            "name": "setStageRewards",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "uint256[]", "name": "tokenIds", "type": "uint256[]"},
            ],
            "name": "stakeTokensIntoSession",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "bytes4", "name": "interfaceId", "type": "bytes4"}
            ],
            "name": "supportsInterface",
            "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "address", "name": "staker", "type": "address"},
                {"internalType": "uint256", "name": "index", "type": "uint256"},
            ],
            "name": "tokenOfStakerInSessionByIndex",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "sessionId", "type": "uint256"},
                {"internalType": "uint256[]", "name": "tokenIds", "type": "uint256[]"},
            ],
            "name": "unstakeTokensFromSession",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
    ],
    "contractName": "GOFPFacet",
}


def get_abi_json(*args) -> List[Dict[str, Any]]:
    return CONTRACT_BUILD["abi"]


# This is workaround to deploy new contract which has only bytecode and abi in brownie
class CustomContract(Contract):
    @classmethod
    def from_build_object(cls, build: Dict[str, Any]):
        self = cls.__new__(cls)
        self.bytecode = build["bytecode"]
        _ContractBase.__init__(self, None, build, {})  # type: ignore
        self.deploy = ContractConstructor(self, self._name)
        self.addres = None
        return self

    def _add_from_tx(self, tx: TransactionReceiptType) -> None:
        tx._confirmed.wait()
        if tx.status and tx.contract_address is not None:
            self.address = tx.contract_address
            self.tx = tx
            self._owner = tx.sender
            try:
                self.at(tx.contract_address, tx.sender, tx)
            except ContractNotFound:
                # if the contract self-destructed during deployment
                pass

    def at(
        self,
        address: str,
        owner: Any = None,
        tx: Optional[TransactionReceiptType] = None,
        persist: bool = True,
    ) -> Contract:
        contract = Contract.from_abi(self._name, self.address, self.abi)
        contract.tx = self.tx
        return contract


def contract_from_build(*args) -> CustomContract:
    return CustomContract.from_build_object(CONTRACT_BUILD)


def boolean_argument_type(raw_value: str) -> bool:
    TRUE_VALUES = ["1", "t", "y", "true", "yes"]
    FALSE_VALUES = ["0", "f", "n", "false", "no"]

    if raw_value.lower() in TRUE_VALUES:
        return True
    elif raw_value.lower() in FALSE_VALUES:
        return False

    raise ValueError(
        f"Invalid boolean argument: {raw_value}. Value must be one of: {','.join(TRUE_VALUES + FALSE_VALUES)}"
    )


def bytes_argument_type(raw_value: str) -> str:
    return raw_value


class GOFPFacet:
    def __init__(self, contract_address: Optional[ChecksumAddress]):
        self.contract_name = "GOFPFacet"
        self.address = contract_address
        self.contract = None
        self.abi = get_abi_json("GOFPFacet")
        if self.address is not None:
            self.contract: Optional[Contract] = Contract.from_abi(
                self.contract_name, self.address, self.abi
            )

    def deploy(self, transaction_config):
        contract_class = contract_from_build(self.contract_name)
        deployed_contract = contract_class.deploy(transaction_config)
        self.address = deployed_contract.address
        self.contract = deployed_contract
        return deployed_contract.tx

    def assert_contract_is_instantiated(self) -> None:
        if self.contract is None:
            raise Exception("contract has not been instantiated")

    def verify_contract(self):
        self.assert_contract_is_instantiated()
        contract_class = contract_from_build(self.contract_name)
        contract_class.publish_source(self.contract)

    def admin_terminus_info(
        self, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.adminTerminusInfo.call(block_identifier=block_number)

    def choose_current_stage_paths(
        self, session_id: int, token_ids: List, paths: List, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.chooseCurrentStagePaths(
            session_id, token_ids, paths, transaction_config
        )

    def create_session(
        self,
        player_token_address: ChecksumAddress,
        payment_token_address: ChecksumAddress,
        payment_amount: int,
        is_active: bool,
        uri: str,
        stages: List,
        is_forgiving: bool,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.createSession(
            player_token_address,
            payment_token_address,
            payment_amount,
            is_active,
            uri,
            stages,
            is_forgiving,
            transaction_config,
        )

    def get_correct_path_for_stage(
        self,
        session_id: int,
        stage: int,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getCorrectPathForStage.call(
            session_id, stage, block_identifier=block_number
        )

    def get_current_stage(
        self, session_id: int, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getCurrentStage.call(
            session_id, block_identifier=block_number
        )

    def get_path_choice(
        self,
        session_id: int,
        token_id: int,
        stage: int,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getPathChoice.call(
            session_id, token_id, stage, block_identifier=block_number
        )

    def get_session(
        self, session_id: int, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getSession.call(session_id, block_identifier=block_number)

    def get_session_token_stake_guard(
        self,
        session_id: int,
        token_id: int,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getSessionTokenStakeGuard.call(
            session_id, token_id, block_identifier=block_number
        )

    def get_stage_reward(
        self,
        session_id: int,
        stage: int,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getStageReward.call(
            session_id, stage, block_identifier=block_number
        )

    def get_staked_token_info(
        self,
        nft_address: ChecksumAddress,
        token_id: int,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getStakedTokenInfo.call(
            nft_address, token_id, block_identifier=block_number
        )

    def init(
        self,
        admin_terminus_address: ChecksumAddress,
        admin_terminus_pool_id: int,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.init(
            admin_terminus_address, admin_terminus_pool_id, transaction_config
        )

    def num_sessions(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.numSessions.call(block_identifier=block_number)

    def num_tokens_staked_into_session(
        self,
        session_id: int,
        staker: ChecksumAddress,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.numTokensStakedIntoSession.call(
            session_id, staker, block_identifier=block_number
        )

    def on_erc1155_batch_received(
        self,
        arg1: ChecksumAddress,
        arg2: ChecksumAddress,
        arg3: List,
        arg4: List,
        arg5: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.onERC1155BatchReceived(
            arg1, arg2, arg3, arg4, arg5, transaction_config
        )

    def on_erc1155_received(
        self,
        arg1: ChecksumAddress,
        arg2: ChecksumAddress,
        arg3: int,
        arg4: int,
        arg5: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.onERC1155Received(
            arg1, arg2, arg3, arg4, arg5, transaction_config
        )

    def on_erc721_received(
        self,
        arg1: ChecksumAddress,
        arg2: ChecksumAddress,
        arg3: int,
        arg4: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.onERC721Received(
            arg1, arg2, arg3, arg4, transaction_config
        )

    def set_correct_path_for_stage(
        self,
        session_id: int,
        stage: int,
        path: int,
        set_is_choosing_active: bool,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setCorrectPathForStage(
            session_id, stage, path, set_is_choosing_active, transaction_config
        )

    def set_session_active(
        self, session_id: int, is_active: bool, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setSessionActive(session_id, is_active, transaction_config)

    def set_session_choosing_active(
        self, session_id: int, is_choosing_active: bool, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setSessionChoosingActive(
            session_id, is_choosing_active, transaction_config
        )

    def set_session_uri(self, session_id: int, uri: str, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setSessionUri(session_id, uri, transaction_config)

    def set_stage_rewards(
        self,
        session_id: int,
        stages: List,
        terminus_addresses: List,
        terminus_pool_ids: List,
        reward_amounts: List,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setStageRewards(
            session_id,
            stages,
            terminus_addresses,
            terminus_pool_ids,
            reward_amounts,
            transaction_config,
        )

    def stake_tokens_into_session(
        self, session_id: int, token_ids: List, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.stakeTokensIntoSession(
            session_id, token_ids, transaction_config
        )

    def supports_interface(
        self, interface_id: bytes, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.supportsInterface.call(
            interface_id, block_identifier=block_number
        )

    def token_of_staker_in_session_by_index(
        self,
        session_id: int,
        staker: ChecksumAddress,
        index: int,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.tokenOfStakerInSessionByIndex.call(
            session_id, staker, index, block_identifier=block_number
        )

    def unstake_tokens_from_session(
        self, session_id: int, token_ids: List, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.unstakeTokensFromSession(
            session_id, token_ids, transaction_config
        )


def get_transaction_config(args: argparse.Namespace) -> Dict[str, Any]:
    signer = network.accounts.load(args.sender, args.password)
    transaction_config: Dict[str, Any] = {"from": signer}
    if args.gas_price is not None:
        transaction_config["gas_price"] = args.gas_price
    if args.max_fee_per_gas is not None:
        transaction_config["max_fee"] = args.max_fee_per_gas
    if args.max_priority_fee_per_gas is not None:
        transaction_config["priority_fee"] = args.max_priority_fee_per_gas
    if args.confirmations is not None:
        transaction_config["required_confs"] = args.confirmations
    if args.nonce is not None:
        transaction_config["nonce"] = args.nonce
    return transaction_config


def add_default_arguments(parser: argparse.ArgumentParser, transact: bool) -> None:
    parser.add_argument(
        "--network", required=True, help="Name of brownie network to connect to"
    )
    parser.add_argument(
        "--address", required=False, help="Address of deployed contract to connect to"
    )
    if not transact:
        parser.add_argument(
            "--block-number",
            required=False,
            type=int,
            help="Call at the given block number, defaults to latest",
        )
        return
    parser.add_argument(
        "--sender", required=True, help="Path to keystore file for transaction sender"
    )
    parser.add_argument(
        "--password",
        required=False,
        help="Password to keystore file (if you do not provide it, you will be prompted for it)",
    )
    parser.add_argument(
        "--gas-price", default=None, help="Gas price at which to submit transaction"
    )
    parser.add_argument(
        "--max-fee-per-gas",
        default=None,
        help="Max fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--max-priority-fee-per-gas",
        default=None,
        help="Max priority fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--confirmations",
        type=int,
        default=None,
        help="Number of confirmations to await before considering a transaction completed",
    )
    parser.add_argument(
        "--nonce", type=int, default=None, help="Nonce for the transaction (optional)"
    )
    parser.add_argument(
        "--value", default=None, help="Value of the transaction in wei(optional)"
    )
    parser.add_argument("--verbose", action="store_true", help="Print verbose output")


def handle_deploy(args: argparse.Namespace) -> None:
    network.connect(args.network)
    transaction_config = get_transaction_config(args)
    contract = GOFPFacet(None)
    result = contract.deploy(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_verify_contract(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    result = contract.verify_contract()
    print(result)


def handle_admin_terminus_info(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    result = contract.admin_terminus_info(block_number=args.block_number)
    print(result)


def handle_choose_current_stage_paths(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.choose_current_stage_paths(
        session_id=args.session_id,
        token_ids=args.token_ids,
        paths=args.paths,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_create_session(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.create_session(
        player_token_address=args.player_token_address,
        payment_token_address=args.payment_token_address,
        payment_amount=args.payment_amount,
        is_active=args.is_active,
        uri=args.uri,
        stages=args.stages,
        is_forgiving=args.is_forgiving,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_get_correct_path_for_stage(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    result = contract.get_correct_path_for_stage(
        session_id=args.session_id, stage=args.stage, block_number=args.block_number
    )
    print(result)


def handle_get_current_stage(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    result = contract.get_current_stage(
        session_id=args.session_id, block_number=args.block_number
    )
    print(result)


def handle_get_path_choice(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    result = contract.get_path_choice(
        session_id=args.session_id,
        token_id=args.token_id,
        stage=args.stage,
        block_number=args.block_number,
    )
    print(result)


def handle_get_session(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    result = contract.get_session(
        session_id=args.session_id, block_number=args.block_number
    )
    print(result)


def handle_get_session_token_stake_guard(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    result = contract.get_session_token_stake_guard(
        session_id=args.session_id,
        token_id=args.token_id,
        block_number=args.block_number,
    )
    print(result)


def handle_get_stage_reward(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    result = contract.get_stage_reward(
        session_id=args.session_id, stage=args.stage, block_number=args.block_number
    )
    print(result)


def handle_get_staked_token_info(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    result = contract.get_staked_token_info(
        nft_address=args.nft_address,
        token_id=args.token_id,
        block_number=args.block_number,
    )
    print(result)


def handle_init(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.init(
        admin_terminus_address=args.admin_terminus_address,
        admin_terminus_pool_id=args.admin_terminus_pool_id,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_num_sessions(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    result = contract.num_sessions(block_number=args.block_number)
    print(result)


def handle_num_tokens_staked_into_session(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    result = contract.num_tokens_staked_into_session(
        session_id=args.session_id, staker=args.staker, block_number=args.block_number
    )
    print(result)


def handle_on_erc1155_batch_received(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.on_erc1155_batch_received(
        arg1=args.arg1,
        arg2=args.arg2,
        arg3=args.arg3,
        arg4=args.arg4,
        arg5=args.arg5,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_on_erc1155_received(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.on_erc1155_received(
        arg1=args.arg1,
        arg2=args.arg2,
        arg3=args.arg3,
        arg4=args.arg4,
        arg5=args.arg5,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_on_erc721_received(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.on_erc721_received(
        arg1=args.arg1,
        arg2=args.arg2,
        arg3=args.arg3,
        arg4=args.arg4,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_correct_path_for_stage(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_correct_path_for_stage(
        session_id=args.session_id,
        stage=args.stage,
        path=args.path,
        set_is_choosing_active=args.set_is_choosing_active,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_session_active(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_session_active(
        session_id=args.session_id,
        is_active=args.is_active,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_session_choosing_active(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_session_choosing_active(
        session_id=args.session_id,
        is_choosing_active=args.is_choosing_active,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_session_uri(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_session_uri(
        session_id=args.session_id, uri=args.uri, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_stage_rewards(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_stage_rewards(
        session_id=args.session_id,
        stages=args.stages,
        terminus_addresses=args.terminus_addresses,
        terminus_pool_ids=args.terminus_pool_ids,
        reward_amounts=args.reward_amounts,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_stake_tokens_into_session(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.stake_tokens_into_session(
        session_id=args.session_id,
        token_ids=args.token_ids,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_supports_interface(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    result = contract.supports_interface(
        interface_id=args.interface_id, block_number=args.block_number
    )
    print(result)


def handle_token_of_staker_in_session_by_index(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    result = contract.token_of_staker_in_session_by_index(
        session_id=args.session_id,
        staker=args.staker,
        index=args.index,
        block_number=args.block_number,
    )
    print(result)


def handle_unstake_tokens_from_session(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = GOFPFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.unstake_tokens_from_session(
        session_id=args.session_id,
        token_ids=args.token_ids,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def generate_cli() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="CLI for GOFPFacet")
    parser.set_defaults(func=lambda _: parser.print_help())
    subcommands = parser.add_subparsers()

    deploy_parser = subcommands.add_parser("deploy")
    add_default_arguments(deploy_parser, True)
    deploy_parser.set_defaults(func=handle_deploy)

    verify_contract_parser = subcommands.add_parser("verify-contract")
    add_default_arguments(verify_contract_parser, False)
    verify_contract_parser.set_defaults(func=handle_verify_contract)

    admin_terminus_info_parser = subcommands.add_parser("admin-terminus-info")
    add_default_arguments(admin_terminus_info_parser, False)
    admin_terminus_info_parser.set_defaults(func=handle_admin_terminus_info)

    choose_current_stage_paths_parser = subcommands.add_parser(
        "choose-current-stage-paths"
    )
    add_default_arguments(choose_current_stage_paths_parser, True)
    choose_current_stage_paths_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    choose_current_stage_paths_parser.add_argument(
        "--token-ids", required=True, help="Type: uint256[]", nargs="+"
    )
    choose_current_stage_paths_parser.add_argument(
        "--paths", required=True, help="Type: uint256[]", nargs="+"
    )
    choose_current_stage_paths_parser.set_defaults(
        func=handle_choose_current_stage_paths
    )

    create_session_parser = subcommands.add_parser("create-session")
    add_default_arguments(create_session_parser, True)
    create_session_parser.add_argument(
        "--player-token-address", required=True, help="Type: address"
    )
    create_session_parser.add_argument(
        "--payment-token-address", required=True, help="Type: address"
    )
    create_session_parser.add_argument(
        "--payment-amount", required=True, help="Type: uint256", type=int
    )
    create_session_parser.add_argument(
        "--is-active", required=True, help="Type: bool", type=boolean_argument_type
    )
    create_session_parser.add_argument(
        "--uri", required=True, help="Type: string", type=str
    )
    create_session_parser.add_argument(
        "--stages", required=True, help="Type: uint256[]", nargs="+"
    )
    create_session_parser.add_argument(
        "--is-forgiving", required=True, help="Type: bool", type=boolean_argument_type
    )
    create_session_parser.set_defaults(func=handle_create_session)

    get_correct_path_for_stage_parser = subcommands.add_parser(
        "get-correct-path-for-stage"
    )
    add_default_arguments(get_correct_path_for_stage_parser, False)
    get_correct_path_for_stage_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    get_correct_path_for_stage_parser.add_argument(
        "--stage", required=True, help="Type: uint256", type=int
    )
    get_correct_path_for_stage_parser.set_defaults(
        func=handle_get_correct_path_for_stage
    )

    get_current_stage_parser = subcommands.add_parser("get-current-stage")
    add_default_arguments(get_current_stage_parser, False)
    get_current_stage_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    get_current_stage_parser.set_defaults(func=handle_get_current_stage)

    get_path_choice_parser = subcommands.add_parser("get-path-choice")
    add_default_arguments(get_path_choice_parser, False)
    get_path_choice_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    get_path_choice_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    get_path_choice_parser.add_argument(
        "--stage", required=True, help="Type: uint256", type=int
    )
    get_path_choice_parser.set_defaults(func=handle_get_path_choice)

    get_session_parser = subcommands.add_parser("get-session")
    add_default_arguments(get_session_parser, False)
    get_session_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    get_session_parser.set_defaults(func=handle_get_session)

    get_session_token_stake_guard_parser = subcommands.add_parser(
        "get-session-token-stake-guard"
    )
    add_default_arguments(get_session_token_stake_guard_parser, False)
    get_session_token_stake_guard_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    get_session_token_stake_guard_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    get_session_token_stake_guard_parser.set_defaults(
        func=handle_get_session_token_stake_guard
    )

    get_stage_reward_parser = subcommands.add_parser("get-stage-reward")
    add_default_arguments(get_stage_reward_parser, False)
    get_stage_reward_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    get_stage_reward_parser.add_argument(
        "--stage", required=True, help="Type: uint256", type=int
    )
    get_stage_reward_parser.set_defaults(func=handle_get_stage_reward)

    get_staked_token_info_parser = subcommands.add_parser("get-staked-token-info")
    add_default_arguments(get_staked_token_info_parser, False)
    get_staked_token_info_parser.add_argument(
        "--nft-address", required=True, help="Type: address"
    )
    get_staked_token_info_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    get_staked_token_info_parser.set_defaults(func=handle_get_staked_token_info)

    init_parser = subcommands.add_parser("init")
    add_default_arguments(init_parser, True)
    init_parser.add_argument(
        "--admin-terminus-address", required=True, help="Type: address"
    )
    init_parser.add_argument(
        "--admin-terminus-pool-id", required=True, help="Type: uint256", type=int
    )
    init_parser.set_defaults(func=handle_init)

    num_sessions_parser = subcommands.add_parser("num-sessions")
    add_default_arguments(num_sessions_parser, False)
    num_sessions_parser.set_defaults(func=handle_num_sessions)

    num_tokens_staked_into_session_parser = subcommands.add_parser(
        "num-tokens-staked-into-session"
    )
    add_default_arguments(num_tokens_staked_into_session_parser, False)
    num_tokens_staked_into_session_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    num_tokens_staked_into_session_parser.add_argument(
        "--staker", required=True, help="Type: address"
    )
    num_tokens_staked_into_session_parser.set_defaults(
        func=handle_num_tokens_staked_into_session
    )

    on_erc1155_batch_received_parser = subcommands.add_parser(
        "on-erc1155-batch-received"
    )
    add_default_arguments(on_erc1155_batch_received_parser, True)
    on_erc1155_batch_received_parser.add_argument(
        "--arg1", required=True, help="Type: address"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg2", required=True, help="Type: address"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg3", required=True, help="Type: uint256[]", nargs="+"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg4", required=True, help="Type: uint256[]", nargs="+"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg5", required=True, help="Type: bytes", type=bytes_argument_type
    )
    on_erc1155_batch_received_parser.set_defaults(func=handle_on_erc1155_batch_received)

    on_erc1155_received_parser = subcommands.add_parser("on-erc1155-received")
    add_default_arguments(on_erc1155_received_parser, True)
    on_erc1155_received_parser.add_argument(
        "--arg1", required=True, help="Type: address"
    )
    on_erc1155_received_parser.add_argument(
        "--arg2", required=True, help="Type: address"
    )
    on_erc1155_received_parser.add_argument(
        "--arg3", required=True, help="Type: uint256", type=int
    )
    on_erc1155_received_parser.add_argument(
        "--arg4", required=True, help="Type: uint256", type=int
    )
    on_erc1155_received_parser.add_argument(
        "--arg5", required=True, help="Type: bytes", type=bytes_argument_type
    )
    on_erc1155_received_parser.set_defaults(func=handle_on_erc1155_received)

    on_erc721_received_parser = subcommands.add_parser("on-erc721-received")
    add_default_arguments(on_erc721_received_parser, True)
    on_erc721_received_parser.add_argument(
        "--arg1", required=True, help="Type: address"
    )
    on_erc721_received_parser.add_argument(
        "--arg2", required=True, help="Type: address"
    )
    on_erc721_received_parser.add_argument(
        "--arg3", required=True, help="Type: uint256", type=int
    )
    on_erc721_received_parser.add_argument(
        "--arg4", required=True, help="Type: bytes", type=bytes_argument_type
    )
    on_erc721_received_parser.set_defaults(func=handle_on_erc721_received)

    set_correct_path_for_stage_parser = subcommands.add_parser(
        "set-correct-path-for-stage"
    )
    add_default_arguments(set_correct_path_for_stage_parser, True)
    set_correct_path_for_stage_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    set_correct_path_for_stage_parser.add_argument(
        "--stage", required=True, help="Type: uint256", type=int
    )
    set_correct_path_for_stage_parser.add_argument(
        "--path", required=True, help="Type: uint256", type=int
    )
    set_correct_path_for_stage_parser.add_argument(
        "--set-is-choosing-active",
        required=True,
        help="Type: bool",
        type=boolean_argument_type,
    )
    set_correct_path_for_stage_parser.set_defaults(
        func=handle_set_correct_path_for_stage
    )

    set_session_active_parser = subcommands.add_parser("set-session-active")
    add_default_arguments(set_session_active_parser, True)
    set_session_active_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    set_session_active_parser.add_argument(
        "--is-active", required=True, help="Type: bool", type=boolean_argument_type
    )
    set_session_active_parser.set_defaults(func=handle_set_session_active)

    set_session_choosing_active_parser = subcommands.add_parser(
        "set-session-choosing-active"
    )
    add_default_arguments(set_session_choosing_active_parser, True)
    set_session_choosing_active_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    set_session_choosing_active_parser.add_argument(
        "--is-choosing-active",
        required=True,
        help="Type: bool",
        type=boolean_argument_type,
    )
    set_session_choosing_active_parser.set_defaults(
        func=handle_set_session_choosing_active
    )

    set_session_uri_parser = subcommands.add_parser("set-session-uri")
    add_default_arguments(set_session_uri_parser, True)
    set_session_uri_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    set_session_uri_parser.add_argument(
        "--uri", required=True, help="Type: string", type=str
    )
    set_session_uri_parser.set_defaults(func=handle_set_session_uri)

    set_stage_rewards_parser = subcommands.add_parser("set-stage-rewards")
    add_default_arguments(set_stage_rewards_parser, True)
    set_stage_rewards_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    set_stage_rewards_parser.add_argument(
        "--stages", required=True, help="Type: uint256[]", nargs="+"
    )
    set_stage_rewards_parser.add_argument(
        "--terminus-addresses", required=True, help="Type: address[]", nargs="+"
    )
    set_stage_rewards_parser.add_argument(
        "--terminus-pool-ids", required=True, help="Type: uint256[]", nargs="+"
    )
    set_stage_rewards_parser.add_argument(
        "--reward-amounts", required=True, help="Type: uint256[]", nargs="+"
    )
    set_stage_rewards_parser.set_defaults(func=handle_set_stage_rewards)

    stake_tokens_into_session_parser = subcommands.add_parser(
        "stake-tokens-into-session"
    )
    add_default_arguments(stake_tokens_into_session_parser, True)
    stake_tokens_into_session_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    stake_tokens_into_session_parser.add_argument(
        "--token-ids", required=True, help="Type: uint256[]", nargs="+"
    )
    stake_tokens_into_session_parser.set_defaults(func=handle_stake_tokens_into_session)

    supports_interface_parser = subcommands.add_parser("supports-interface")
    add_default_arguments(supports_interface_parser, False)
    supports_interface_parser.add_argument(
        "--interface-id", required=True, help="Type: bytes4", type=bytes_argument_type
    )
    supports_interface_parser.set_defaults(func=handle_supports_interface)

    token_of_staker_in_session_by_index_parser = subcommands.add_parser(
        "token-of-staker-in-session-by-index"
    )
    add_default_arguments(token_of_staker_in_session_by_index_parser, False)
    token_of_staker_in_session_by_index_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    token_of_staker_in_session_by_index_parser.add_argument(
        "--staker", required=True, help="Type: address"
    )
    token_of_staker_in_session_by_index_parser.add_argument(
        "--index", required=True, help="Type: uint256", type=int
    )
    token_of_staker_in_session_by_index_parser.set_defaults(
        func=handle_token_of_staker_in_session_by_index
    )

    unstake_tokens_from_session_parser = subcommands.add_parser(
        "unstake-tokens-from-session"
    )
    add_default_arguments(unstake_tokens_from_session_parser, True)
    unstake_tokens_from_session_parser.add_argument(
        "--session-id", required=True, help="Type: uint256", type=int
    )
    unstake_tokens_from_session_parser.add_argument(
        "--token-ids", required=True, help="Type: uint256[]", nargs="+"
    )
    unstake_tokens_from_session_parser.set_defaults(
        func=handle_unstake_tokens_from_session
    )

    return parser


def main() -> None:
    parser = generate_cli()
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
